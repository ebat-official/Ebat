generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Form {
  id          String   @id @default(uuid()) @db.Uuid
  userId      String   @db.Uuid
  createdAt   DateTime @default(now())
  published   Boolean  @default(false)
  name        String
  description String   @default("")
  content     String   @default("[]")

  visits      Int      @default(0)
  submissions Int      @default(0)

  shareURL        String            @unique @default(uuid())
  FormSubmissions FormSubmissions[]

  @@unique([name, userId])
}

model FormSubmissions {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  formId    String   @db.Uuid
  form      Form     @relation(fields: [formId], references: [id])

  content String
}

model User {
  id                  String           @id @default(uuid()) @db.Uuid
  name                String?
  email               String           @unique
  userName            String?          @unique
  password            String?
  emailVerified       DateTime?
  accounts            Account[]
  role                UserRole         @default(USER)
  accountStatus       AccountStatus    @default(ACTIVE)
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  karmaPoints         Int              @default(0)
  userProfile         UserProfile?     @relation("UserToProfile")
}

model UserProfile {
  id          String  @id @default(uuid()) @db.Uuid
  userId      String  @unique @db.Uuid
  name        String?
  jobTitle    String?
  description String?
  companyName String?
  phoneNumber String?
  image       String?   
  coverImage  String?   
  location    String?   
  externalLinks Json?
  user         User     @relation("UserToProfile", fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                String   @id @default(uuid()) @db.Uuid
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(uuid()) @db.Uuid
  email   String   @unique
  token   String
  expires DateTime
}

model ResetToken {
  id      String   @id @default(uuid()) @db.Uuid
  email   String   @unique
  token   String
  expires DateTime
}

enum UserRole {
  ADMIN
  USER
}

enum SubscriptionPlan {
  BASIC
  PREMIUM
}

enum AccountStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}
